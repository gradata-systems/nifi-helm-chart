{{- $serviceHostName := printf "%s-http.%s" (include "nifi.fullname" . ) .Release.Namespace }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nifi.fullname" . }}
  labels:
    {{- include "nifi.labels" . | nindent 4 }}
data:
  custom-startup.sh: |
    #!/bin/bash -e

    prop_add () {
      target_file="${3:-${nifi_props_file}}"
      echo "adding property to target file ${target_file}"
      echo "$1=$2" >> "${target_file}"
    }

    prop_remove () {
      target_file="${3:-${nifi_props_file}}"
      echo "removing property from target file ${target_file}"
      sed -i -e "s|^$1=.*$||" "${target_file}"
    }

    authorizers_file='conf/authorizers.xml'
    bootstrap_file='conf/bootstrap.conf'
    nifi_properties_file='conf/nifi.properties'
    logback_file='conf/logback.xml'
    scripts_dir='/opt/nifi/scripts'
    [ -f "${scripts_dir}/common.sh" ] && . "${scripts_dir}/common.sh"

    {{- /* Set host connection properties so the node is reachable, with TLS hostname verification */}}
    host_name="${HOSTNAME}.{{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
    pod_index=$(echo ${HOSTNAME} | sed -E 's/^.*([0-9]+)$/\1/g')

    prop_replace 'nifi.web.https.host' "${host_name}"
    export NIFI_WEB_HTTPS_HOST="${host_name}"
    export NIFI_WEB_PROXY_HOST=" \
      ${host_name}, \
      {{ .Values.ingress.hostName }}, \
      {{ include "nifi.siteToSiteHostName" . }}, \
      {{ include "nifi.siteToSiteHostName" . }}:443, \
      {{ printf "%s-${pod_index}.%s" (include "nifi.fullname" .) (include "nifi.siteToSiteHostName" .) }}, \
      {{ printf "%s-${pod_index}.%s" (include "nifi.fullname" .) (include "nifi.siteToSiteHostName" .) }}:443, \
      {{ $serviceHostName }}, \
      {{ $serviceHostName }}:{{ .Values.ports.https }}"

    {{- /* S2S cluster-local connections */}}
    export NIFI_REMOTE_INPUT_HOST="${HOSTNAME}"
    prop_add 'nifi.remote.route.raw.cluster.when' '${s2s.source.hostname:equals('\''{{ $serviceHostName }}'\'')}'
    prop_add 'nifi.remote.route.raw.cluster.hostname' '${s2s.target.hostname}'
    prop_add 'nifi.remote.route.raw.cluster.port' {{ .Values.ports.remoteinput | squote }}
    prop_add 'nifi.remote.route.raw.cluster.secure' 'true'

    {{- /* S2S connections via Ingress */}}
    prop_add 'nifi.remote.route.http.ingress.when' '${X-ProxyHost:contains('\''{{ include "nifi.siteToSiteHostName" . }}'\'')}'
    prop_add 'nifi.remote.route.http.ingress.hostname' '${s2s.target.hostname}.{{ include "nifi.siteToSiteHostName" . }}'
    prop_add 'nifi.remote.route.http.ingress.port' '443'
    prop_add 'nifi.remote.route.http.ingress.secure' 'true'

    {{- /* Enable repository encryption */}}
    {{- if .Values.encryption.repository.enabled }}
    prop_replace 'nifi.repository.encryption.protocol.version' '1'
    prop_replace 'nifi.repository.encryption.key.id' '{{ .Values.encryption.repository.keyId }}'
    prop_replace 'nifi.repository.encryption.key.provider' 'KEYSTORE'
    prop_replace 'nifi.repository.encryption.key.provider.keystore.location' 'conf/{{ .Values.encryption.repository.secretRef.key }}'
    prop_replace 'nifi.repository.encryption.key.provider.keystore.password' "${KEYSTORE_PASSWORD}"
    {{- end }}

    {{- /* Replace properties not exposed by environment variables */}}
    {{- if .Values.cluster.enabled }}
    export NIFI_CLUSTER_ADDRESS="${host_name}"
    prop_replace 'nifi.zookeeper.client.secure' 'true'
    prop_replace 'nifi.zookeeper.security.keystore' "${KEYSTORE_PATH}"
    prop_replace 'nifi.zookeeper.security.keystoreType' "${KEYSTORE_TYPE}"
    prop_replace 'nifi.zookeeper.security.keystorePasswd' "${KEYSTORE_PASSWORD}"
    prop_replace 'nifi.zookeeper.security.truststore' "${TRUSTSTORE_PATH}"
    prop_replace 'nifi.zookeeper.security.truststoreType' "${TRUSTSTORE_TYPE}"
    prop_replace 'nifi.zookeeper.security.truststorePasswd' "${TRUSTSTORE_PASSWORD}"

    {{- /* Connect to NiFi Registry. These lines are commented out in the base config file. */}}
    nifi_registry_url="https://{{ include "nifi-registry.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.nifi_registry.ports.https }}"
    sed -i -E "s|^.*(nifi.nar.library.provider.nifi-registry.implementation=).*$|\1org.apache.nifi.registry.extension.NiFiRegistryNarProvider|g" "${nifi_properties_file}"
    sed -i -E "s|^.*(nifi.nar.library.provider.nifi-registry.url=).*$|\1${nifi_registry_url}|g" "${nifi_properties_file}"

    {{- /* Grant nodes cluster permissions */}}
    list_identities () {
      node_identities=""
      for (( i = 0; i < {{ .Values.global.nifi.nodeCount }}; i++ )); do
        node_dn="CN={{ include "nifi.fullname" . }}-${i}.{{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
        node_identities="${node_identities}<property name=\"$1 Node-${i}\">${node_dn}</property>\n"
      done
      ingress_dn="CN={{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
      node_identities="${node_identities}<property name=\"$1 Node-Ingress\">${ingress_dn}</property>\n"
      sed -i -E "s|(<property name=\"$1 1\">.*</property>)|\1\n${node_identities}|g" "${authorizers_file}"
    }
    list_identities 'Node Identity'
    list_identities 'Initial User Identity'

    {{- /* Set file and directory paths to persistent locations */}}
    {{- with .Values.persistence }}
    conf_dir='./persistent_conf'
    prop_replace 'nifi.flow.configuration.json.file' "${conf_dir}/{{ .config.files.flowJson }}"
    prop_replace 'nifi.flow.configuration.archive.dir' "${conf_dir}/archive"

    sed -i -E "s|(<property name=\"Authorizations File\">).*(</property>)|\1${conf_dir}/{{ .config.files.authorizations }}\2|g" "${authorizers_file}"
    sed -i -E "s|(<property name=\"Users File\">).*(</property>)|\1${conf_dir}/{{ .config.files.users }}\2|g" "${authorizers_file}"
    {{- end }}

    {{- /* Define flowfile repository */}}
    {{- with .Values.persistence.repo.flowfile }}
    prop_replace 'nifi.flowfile.repository.directory' {{ printf "./%s" .mountDir | squote }}
    {{- end }}

    {{- /* Define content repositories */}}
    prop_remove 'nifi.content.repository.directory.default'
    {{- range .Values.persistence.repo.content }}
    prop_add 'nifi.content.repository.directory.{{ .name }}' {{ printf "./%s" .mountDir | squote }}
    {{- end }}

    {{- /* Define provenance repositories */}}
    prop_remove 'nifi.provenance.repository.directory.default'
    {{- range .Values.persistence.repo.provenance }}
    prop_add 'nifi.provenance.repository.directory.{{ .name }}' {{ printf "./%s" .mountDir | squote }}
    {{- end }}

    {{- /* Generate a TLS cert for this node from the CSI-provided certificates and private key */}}
    cert_dir='/opt/certmanager'
    tls_dir='/opt/tls'
    rm -f $tls_dir/*
    openssl pkcs12 -export \
      -in $cert_dir/tls.crt \
      -inkey $cert_dir/tls.key \
      -CAfile $cert_dir/ca.crt \
      -passout "pass:${KEYSTORE_PASSWORD}" \
      -out $tls_dir/keystore.p12
    keytool -import -noprompt -trustcacerts \
      -file $cert_dir/ca.crt \
      -storepass "${TRUSTSTORE_PASSWORD}" \
      -destkeystore $tls_dir/truststore.p12 \
      -deststoretype pkcs12
    {{- end }}

    {{- /* Task termination period */}}
    prop_replace 'graceful.shutdown.seconds' {{ .Values.shutdown.gracefulShutdownSeconds }} "${bootstrap_file}"

    {{- /* Set UI autorefresh interval */}}
    prop_replace 'nifi.ui.autorefresh.interval' {{ .Values.ui.refreshInterval | squote }}

    {{- with .Values.ui.timeZone }}
    echo 'java.arg.8=-Duser.timezone={{ . }}' >> "${bootstrap_file}"
    {{- end }}

    {{- with .Values.ui.maxThreads }}
    prop_replace 'nifi.web.jetty.threads' {{ . | squote }}
    {{- end }}

    {{- /* Set user logging levels */}}
    {{- range $logger, $level := .Values.logging.levels }}
    xmlstarlet ed --inplace --update "//logger[@name='{{ $logger }}']/@level" --value '{{ $level }}' "${logback_file}"
    {{- end }}

    {{- range $key, $value := .Values.extraConfig.nifiProperties }}
    prop_replace {{ $key | squote }} {{ $value | quote }}
    {{- end }}

    {{- if .Values.debugStartup }}
    sleep 1000000
    {{- end }}

    {{- with .Values.umask }}
    umask {{ . }}
    {{- end }}

    exec $scripts_dir/start.sh
  pre-stop.sh: |
    #!/bin/bash

    log_file='/opt/nifi/nifi-current/logs/k8s-pre-stop.log'
    log_level_info='INFO'
    log_level_warn='WARN'
    log_level_error='ERROR'
    host_name="${HOSTNAME}.{{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
    default_node_uri="https://{{ $serviceHostName }}:{{ .Values.ports.https }}/nifi-api"
    max_retries=3

    function log() {
      log_level=$1
      log_msg=$2
      shift 2

      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$log_level] $log_msg" >> "$log_file"
    }

    function call_api() {
      http_method=$1
      request_url=$2
      shift 2

      http_response_pattern='^(.+?)\s*http_code=([0-9]+)$'
      response=$(curl -X "$http_method" -s "$request_url" \
        --cacert /opt/certmanager/ca.crt \
        --cert /opt/certmanager/tls.crt \
        --key /opt/certmanager/tls.key \
        -H 'Content-Type: application/json' \
        -H 'Accept: application/json' \
        -w '\nhttp_code=%{http_code}' \
        "$@")

      if [[ "$response" =~ $http_response_pattern ]]; then
        echo "${BASH_REMATCH[1]}"
        http_response_code=${BASH_REMATCH[2]}
        if [[ $http_response_code -ne 200 ]]; then
          log $log_level_error "Request to $request_url failed. Response code: $http_response_code. Response: $response"
          return 1
        fi
      else
        log $log_level_error "Invalid HTTP request to: $request_url. Response: $response"
        return 1
      fi
    }

    function get_node_by_address() {
      node_uri=$1
      node_address=$2
      shift 2

      call_api GET "$node_uri/controller/cluster" | jq -c ".cluster.nodes[] | select(.address == \"$node_address\")"
    }

    function get_node_by_id() {
      node_uri=$1
      node_id=$2
      shift 2

      call_api GET "$node_uri/controller/cluster" | jq -c ".cluster.nodes[] | select(.nodeId == \"$node_id\")"
    }

    function get_connected_node_uri() {
      node_address="$(call_api GET "$default_node_uri/controller/cluster" | jq -r "[.cluster.nodes[] | select((.status | startswith(\"CONNECTED\")) and .address != \"$host_name\")] | .[0].address")"
      echo "https://$node_address:{{ .Values.ports.https }}/nifi-api"
    }

    function get_node_status() {
      node_uri=$1
      node_id=$2
      shift 2

      get_node_by_id "$node_uri" "$node_id" | jq -r '.status'
    }

    function set_node_status() {
      node_uri=$1
      node_id=$2
      node_status=$3
      shift 3

      response=$(call_api PUT "$node_uri/controller/cluster/nodes/$node_id" -d "{ \"node\": { \"nodeId\": \"$node_id\", \"status\": \"$node_status\" } }")
    }

    function wait_for_node_status() {
      node_uri=$1
      node_id=$2
      node_status=$3
      shift 3

      retry_count=0
      while [ $retry_count -lt $max_retries ]
      do
        log $log_level_info "Waiting for node $node_id to reach status $node_status..."
        current_status=$(get_node_status "$node_uri" "$node_id")
        if [ $? -ne 0 ] || [ -z "$current_status" ]; then
          # Query failed, so increment the retry counter
          retry_count=$((retry_count+1))
        elif [[ "$node_status" == "$current_status" ]]; then
          log $log_level_info "Node $node_id reached status $node_status"
          return 0
        fi
        sleep 3
      done
      return 1
    }

    # Store the URI of the first connected node that's not the current node.
    # Once the current node is disconnected, it won't be able to service API requests.
    connected_node_uri="$(get_connected_node_uri)"

    node="$(get_node_by_address "$default_node_uri" "$host_name")"
    node_id="$(echo "$node" | jq -r '.nodeId')"
    node_status="$(echo "$node" | jq -r '.status')"

    if [[ ! "$node_status" == CONNECTED* ]]; then
      log $log_level_info "Node is not connected. Proceeding to shut down."
      exit 0
    else
      # Disconnect the node
      log $log_level_info "Disconnecting node $node_id"
      set_node_status "$connected_node_uri" "$node_id" 'DISCONNECTING'

      # Offload the node
      if [[ ! $(wait_for_node_status "$connected_node_uri" "$node_id" 'DISCONNECTED') ]]; then
        log $log_level_info "Offloading node $node_id"
        set_node_status "$connected_node_uri" "$node_id" 'OFFLOADING'
        wait_for_node_status "$connected_node_uri" "$node_id" 'OFFLOADED'
        log $log_level_info "Node $node_id offload complete. Proceeding to shut down."
      else
        log $log_level_warn "Failed to disconnect node. Proceeding to shut down."
      fi
    fi

    {{- with .Values.filebeat }}
    {{- if .enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nifi.fullname" $ }}-filebeat
  labels:
    {{- include "nifi.labels" $ | nindent 4 }}
data:
  filebeat.yml: |
    tags:
      {{- toYaml .tags | nindent 6 }}
    filebeat.inputs:
      - type: filestream
        id: nifi-app
        fields:
          log_id: app
        paths: ["/nifi/logs/nifi-app*.log"]
      - type: filestream
        id: nifi-request
        fields:
          log_id: request
        paths: ["/nifi/logs/nifi-request*.log"]
      - type: filestream
        id: nifi-user
        fields:
          log_id: user
        paths: ["/nifi/logs/nifi-user*.log"]
    {{- if or .labels .processors }}
    processors:
      {{- if .labels }}
      - add_labels:
          labels:
            {{- toYaml .labels | nindent 12 }}
      {{- end }}
      {{- toYaml .processors | nindent 6 }}
    {{- end }}
    {{ printf "output.%s:" .output.type }}
    {{- toYaml .output.parameters | nindent 6 }}
    queue.mem:
      flush.timeout: {{ .queue.flushTimeout }}
{{- end }}
{{- end }}
