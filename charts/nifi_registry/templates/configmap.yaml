{{- if .Values.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nifi-registry.fullname" . }}
  labels:
    {{- include "nifi-registry.labels" . | nindent 4 }}
data:
  custom-startup.sh: |
    #!/bin/bash -e

    scripts_dir='/opt/nifi-registry/scripts'
    [ -f "${scripts_dir}/common.sh" ] && . "${scripts_dir}/common.sh"

    authorizers_file='conf/authorizers.xml'
    login_providers_file='conf/identity-providers.xml'
    providers_file='conf/providers.xml'
    bootstrap_file='conf/bootstrap.conf'

    {{- /* Grant nodes cluster permissions */}}
    list_identities () {
      node_identities=""
      for (( i = 0; i < {{ .Values.global.nifi.nodeCount }}; i++ )); do
        node_dn="CN={{ include "nifi.fullname" . }}-${i}.{{ include "nifi.fullname" . }}.{{ .Release.Namespace }}"
        node_identities="${node_identities}<property name=\"$1 Node-${i}\">${node_dn}</property>\n"
      done
      sed -i -E "s|(<\!--)?(<property name=\"$1 1\">.*</property>)(-->)?|\2\n${node_identities}|g" "${authorizers_file}"
    }
    list_identities 'NiFi Identity'
    list_identities 'Initial User Identity'

    {{- /* Set LDAP TLS properties (as Docker image `update_login_providers.sh` mistakenly updates, instead of inserts elements */}}
    insert_property () {
      property_name=$1
      property_value=$2
      if [ -n "${property_value}" ]; then
        xmlstarlet ed --inplace --subnode '//identityProviders/provider[1]' --type elem --name 'property' --value "${property_value}" \
          --var node '$prev' \
          --insert '$node' --type attr --name 'name' --value "${property_name}" \
          "${login_providers_file}"
      fi
    }
    # Remove comments to enable the ldap-provider
    sed -i '/To enable the ldap-identity-provider remove/d' "${login_providers_file}"
    insert_property 'TLS - Keystore'              "${LDAP_TLS_KEYSTORE}"
    insert_property 'TLS - Keystore Password'     "${LDAP_TLS_KEYSTORE_PASSWORD}"
    insert_property 'TLS - Keystore Type'         "${LDAP_TLS_KEYSTORE_TYPE}"
    insert_property 'TLS - Truststore'            "${LDAP_TLS_TRUSTSTORE}"
    insert_property 'TLS - Truststore Password'   "${LDAP_TLS_TRUSTSTORE_PASSWORD}"
    insert_property 'TLS - Truststore Type'       "${LDAP_TLS_TRUSTSTORE_TYPE}"
    insert_property 'TLS - Protocol'              "${LDAP_TLS_PROTOCOL}"

    {{- /* Set the bootstrap encryption key */}}
    prop_replace 'nifi.registry.bootstrap.sensitive.key' "${NIFI_REGISTRY_SENSITIVE_PROPERTIES_KEY}" "${bootstrap_file}"

    {{- /* Use the database flow persistence provider if specified */}}
    {{- if ne .Values.persistence.flow.provider "file" }}
    persistence_provider='org.apache.nifi.registry.provider.flow.DatabaseFlowPersistenceProvider'
    xmlstarlet ed --inplace --delete '//providers/flowPersistenceProvider/property' "${providers_file}"
    xmlstarlet ed --inplace --update '//providers/flowPersistenceProvider/class' --value "${persistence_provider}" "${providers_file}"
    {{- end }}

    {{- /* Set config file paths to persistent locations */}}
    conf_dir='./persistent_conf'
    {{- with .Values.persistence }}
    sed -i -E "s|(<property name=\"Authorizations File\">).*(</property>)|\1${conf_dir}/{{ .config.files.authorizations }}\2|g" "${authorizers_file}"
    sed -i -E "s|(<property name=\"Users File\">).*(</property>)|\1${conf_dir}/{{ .config.files.users }}\2|g" "${authorizers_file}"
    {{- end }}

    {{- range $key, $value := .Values.extraConfig.nifiRegistryProperties }}
    prop_replace {{ $key | squote }} {{ $value | quote }}
    {{- end }}

    exec $scripts_dir/start.sh

{{- end }}